# Cursor Rules for Flink Resource Estimator

## Project Overview
This is a FastAPI web application for estimating Apache Flink cluster resource requirements. It uses Pydantic models for data validation and provides both web UI and REST API interfaces.

## Development Environment
- **Package Manager**: Use `uv` instead of pip/python directly
- **Python Version**: Use the version specified in `.python-version`
- **Dependencies**: Managed via `requirements.txt`

## Code Style & Patterns

### Pydantic Models
- All data structures use Pydantic V2 models for type safety
- Use `@field_validator` for custom validation (not deprecated `@validator`)
- Include docstrings for all model classes
- Use `Field()` with appropriate constraints (gt=0, ge=0, min_length, etc.)
- Implement calculated properties using `@property` decorators

### FastAPI Endpoints
- Provide both form-based and JSON API endpoints where appropriate
- Use proper HTTP status codes and error responses
- Include descriptive docstrings for all endpoints
- Use `Annotated[Type, Form()]` for form parameters
- Return structured error responses with `JSONResponse`
- Support file operations: save, download, preview, and reload saved estimations

### File Structure
- Keep models at the top of main.py after imports
- Group related endpoints together
- Use meaningful function and variable names
- Separate business logic from endpoint handlers

### Error Handling
- Wrap operations in try-catch blocks
- Return user-friendly error messages
- Log errors appropriately
- Use proper HTTP status codes (400 for validation, 500 for server errors)

### JSON Persistence
- Use Pydantic's `model_dump_json()` for serialization
- Include metadata (timestamps, IDs) in saved files
- Create safe filenames by sanitizing project names
- Organize saved files in dedicated directories
- Provide multiple actions for saved files: Download, Preview, and Reload Results

## Common Commands

### Local Development
```bash
# Install dependencies
uv pip install -r requirements.txt

# Run development server
uv run main.py

# Run in development mode with reload
uv run uvicorn main:app --reload --host 0.0.0.0 --port 8000

# Test the application
uv run python test_script.py  # if test script exists
```

### Docker Commands
```bash
# Build and run with Docker Compose
docker-compose up --build

# Build Docker image manually
docker build -t flink-estimator .

# Run Docker container
docker run -d -p 8000:8000 --name flink-estimator flink-estimator
```

### Kubernetes Commands
```bash
# Deploy to Kubernetes
kubectl apply -f k8s/

# Deploy with Kustomize
kubectl apply -k k8s/

# Port forward for local access
kubectl port-forward service/flink-estimator-service 8000:80
```

## UI/UX Guidelines
- Use modern, responsive design with CSS Grid/Flexbox
- Implement hover effects and smooth transitions
- Provide real-time feedback (loading states, success/error messages)
- Use semantic colors (blue for primary, green for success, red for errors)
- Include emoji icons for better visual hierarchy
- Ensure mobile responsiveness

## API Design
- Follow RESTful conventions
- Provide both GET (query params) and POST (JSON body) variants for estimation
- Include comprehensive parameter validation
- Auto-generate OpenAPI documentation via FastAPI
- Support CORS if needed for frontend integration

## Best Practices
- Always validate input data using Pydantic models
- Use type hints throughout the codebase
- Implement proper logging for debugging
- Create comprehensive error messages
- Follow the principle of least surprise in API design
- Document all public functions and classes
- Use environment variables for configuration when appropriate

## File Naming Conventions
- Use snake_case for Python files and functions
- Use kebab-case for HTML/CSS files
- Use descriptive names that indicate purpose
- Save estimation files with timestamp and project name for easy identification

## Testing
- Test Pydantic model validation with both valid and invalid data
- Verify API endpoints return expected data structures
- Test file persistence and retrieval
- Validate error handling paths
- Ensure UI interactions work correctly

## Performance Considerations
- Use appropriate data types (int vs float) for calculations
- Implement efficient file operations for persistence
- Consider caching for frequently accessed data
- Optimize CSS/JS loading for better UX

## Containerization & Deployment
- Use multi-stage Docker builds for smaller images
- Run containers as non-root user for security
- Use proper health checks for container orchestration
- Mount persistent volumes for saved estimations
- Configure resource limits and requests for Kubernetes
- Use environment variables for configuration
- Implement graceful shutdown handling 